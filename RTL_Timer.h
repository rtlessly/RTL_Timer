#ifndef _RTL_Timer_H_
#define _RTL_Timer_H_

#include <inttypes.h>
#include <RTL_StdLib.h>
#include <EventSource.h>


//******************************************************************************
/// A timer with millisecond resolution. Timers are always one-shot, i.e., they 
/// do not automatically restart once they expire. 
//******************************************************************************
class Timer : public EventSource
{
    DECLARE_CLASSNAME;

    /// The timer event ID that is posted when the timer expires.
    public: static const EVENT_ID TIMER_FIRED_EVENT = (EventSourceID::Timer | EventCode::DefaultEvent);

    //**************************************************************************
    /// Constructs an instance of the Timer class.
    //**************************************************************************
    public: Timer() { };

    //**************************************************************************
    /// Implementation of the EventSource::Poll method. This method is called
    /// by the event dispatch loop.
    //**************************************************************************
    public: void Poll();

    //**************************************************************************
    /// Starts the timer with the specified timeout, in milliseconds.
    /// <param name="interval"> The timeout interval in milliseconds</param>
    /// <param name="sourceID"> The optional timer ID value. The default is 0.</param>
    //**************************************************************************
    public: void Start(uint32_t interval, uint8_t sourceID=0);

    //**************************************************************************
    /// Cancels the timer. The timer stops and will not trigger.
    //**************************************************************************
    public: void Cancel();

    //**************************************************************************
    /// Gets the timeout interval value, in milliseconds.
    //**************************************************************************
    public: uint32_t Interval() { return _interval; };

    //**************************************************************************
    /// Get a value indicating if the timer has expired.
    //**************************************************************************
    public: bool IsExpired() { return _expired; };

    /// The timer expired flag.
    private: bool _expired = true;

    /// The timer ID.
    private: uint8_t  _sourceID;

    /// The timeout interval value, in milliseconds.
    private: uint32_t _interval;

    /// The time, in milliseconds, when the timer started.
    private: uint32_t _startTime;
};



/*******************************************************************************
The event generated by the timer. 
Extends the Event class to add the timer source ID.
*******************************************************************************/
class TimerEvent : public Event
{
    public: TimerEvent(uint32_t elapsedTime, uint8_t sourceID=0) : Event(Timer::TIMER_FIRED_EVENT, elapsedTime), _sourceID(sourceID) { };
    
    public: uint8_t SourceID() { return _sourceID; };
    
    public: uint32_t ElapsedTime() { return Data.UnsignedLong; };
    
    private: uint8_t _sourceID;
};

#endif

