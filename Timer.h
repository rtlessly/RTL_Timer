#ifndef _Timer_H_
#define _Timer_H_

#include <inttypes.h>
#include <RTL_StdLib.h>
#include <EventSource.h>


/*******************************************************************************
A timer with millisecond resolution.
*******************************************************************************/
class Timer : public EventSource
{
    DECLARE_CLASSNAME;

    public: static const EVENT_ID TIMER_FIRED_EVENT = (EventSourceID::Timer | EventCode::DefaultEvent);

    //**************************************************************************
    // Constructors
    //**************************************************************************
    public: Timer() : _expired(true) { _id="Timer"; };

    //**************************************************************************
    // Public methods
    //**************************************************************************
    public: void Start(uint32_t interval, uint8_t sourceID=0);
    public: void Cancel();
    public: void Poll();

    //**************************************************************************
    // Properties
    //**************************************************************************
    public: uint32_t Interval() { return _interval; };

    public: bool IsExpired() { return _expired; };

    //**************************************************************************
    // Internal state
    //**************************************************************************
    private: bool     _expired;
    private: uint8_t  _sourceID;
    private: uint32_t _interval;
    private: uint32_t _startTime;
};



/*******************************************************************************
The event generated by the timer. 
Extends the Event class to add the timer source ID.
*******************************************************************************/
class TimerEvent : public Event
{
    public: TimerEvent(uint32_t elapsedTime, uint8_t sourceID=0) : Event(Timer::TIMER_FIRED_EVENT, elapsedTime), _sourceID(sourceID) { };
    
    public: uint8_t SourceID() { return _sourceID; };
    
    public: uint32_t ElapsedTime() { return Data.UnsignedLong; };
    
    private: uint8_t _sourceID;
};

#endif

